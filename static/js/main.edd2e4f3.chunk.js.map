{"version":3,"sources":["index.js"],"names":["extend","meshline","lines","Array","fill","colors","Fatline","material","useRef","useState","parseInt","length","Math","random","color","ratio","max","width","pos","THREE","map","add","clone","curve","useFrame","current","uniforms","dashOffset","value","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","dashArray","dashRatio","Scene","group","theta","rotation","set","sin","degToRad","_","index","key","App","class","style","background","camera","position","fov","href","children","ReactDOM","render","document","getElementById"],"mappings":"2NAOAA,YAAOC,GAEP,IACMC,EAAQ,IAAIC,MADD,KACiBC,OAC5BC,EAAS,CAAC,UAAW,UAAW,UAAW,WAEjD,SAASC,IACP,IAAMC,EAAWC,mBADA,EAEDC,mBAAS,IAAMJ,EAAOK,SAASL,EAAOM,OAASC,KAAKC,YAA7DC,EAFU,sBAGDL,mBAAS,IAAM,GAAM,GAAMG,KAAKC,UAAzCE,EAHU,sBAIDN,mBAAS,IAAMG,KAAKI,IAAI,GAAK,GAAMJ,KAAKC,WAAjDI,EAJU,sBAMDR,mBAAS,KACvB,IAAIS,EAAM,IAAIC,UAAc,GAAK,GAAKP,KAAKC,UAAW,EAAG,GAAK,GAAKD,KAAKC,UACxE,OAAO,IAAIV,MAAM,IAAIC,OAAOgB,IAAI,IAAMF,EAAIG,IAAI,IAAIF,UAAc,EAAoB,EAAhBP,KAAKC,SAAc,EAAoB,EAAhBD,KAAKC,SAAc,EAAoB,GAAhBD,KAAKC,WAAgBS,WAFlIC,EANU,oBAYjB,OADAC,YAAS,IAAOjB,EAASkB,QAAQC,SAASC,WAAWC,OAAS,MAE5D,8BAEE,8BAAUC,SAAWC,GAAUA,EAAKC,OAAOC,SAAWF,EAAKE,UACzD,8BAAUH,SAAWC,GAASA,EAAKC,OAAOE,YAAYH,IACpD,sCAAkBI,KAAM,CAACX,GAAQM,SAAWC,GAAUA,EAAKC,OAAOI,SAAWL,EAAKM,UAAU,SAIhG,sCAAkBC,OAAO,WAAWC,IAAK/B,EAAUgC,aAAW,EAACC,WAAW,EAAOC,UAAWxB,EAAOH,MAAOA,EAAO4B,UAAW,GAAKC,UAAW5B,KAKlJ,SAAS6B,IACP,IAAIC,EAAQrC,mBACRsC,EAAQ,EAGZ,OADAtB,YAAS,IAAMqB,EAAMpB,QAAQsB,SAASC,IAAI,EAAG,EAAIpC,KAAKqC,IAAI9B,OAAW+B,SAAUJ,GAAS,MAAS,IAE/F,2BAAOR,IAAKO,GACT3C,EAAMkB,IAAI,CAAC+B,EAAGC,IACb,kBAAC9C,EAAD,CAAS+C,IAAKD,MAMtB,SAASE,IACP,OACE,yBAAKC,MAAM,QACT,kBAAC,IAAD,CAAQC,MAAO,CAAEC,WAAY,WAAaC,OAAQ,CAAEC,SAAU,CAAC,EAAG,GAAI,IAAKC,IAAK,KAC9E,kBAAChB,EAAD,OAEF,uBAAGiB,KAAK,mCAAmCN,MAAM,WAAWO,SAAS,oBACrE,uBAAGD,KAAK,kCAAkCN,MAAM,eAAeO,SAAS,eACxE,0BAAMP,MAAM,UAAZ,gBAKNQ,IAASC,OAAO,kBAACV,EAAD,MAASW,SAASC,eAAe,U","file":"static/js/main.edd2e4f3.chunk.js","sourcesContent":["import ReactDOM from 'react-dom'\nimport * as THREE from 'three'\nimport React, { useState, useRef } from 'react'\nimport { extend, Canvas, useFrame } from 'react-three-fiber'\nimport * as meshline from 'three.meshline'\nimport './styles.css'\n\nextend(meshline)\n\nconst numLines = 100\nconst lines = new Array(numLines).fill()\nconst colors = ['#A2CCB6', '#FCEEB5', '#EE786E', '#EE786E']\n\nfunction Fatline() {\n  const material = useRef()\n  const [color] = useState(() => colors[parseInt(colors.length * Math.random())])\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random())\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()))\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(30 - 60 * Math.random(), -5, 10 - 20 * Math.random())\n    return new Array(30).fill().map(() => pos.add(new THREE.Vector3(2 - Math.random() * 4, 4 - Math.random() * 2, 5 - Math.random() * 10)).clone())\n  })\n  // Hook into the render loop and decrease the materials dash-offset\n  useFrame(() => (material.current.uniforms.dashOffset.value -= 0.0005))\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={(self) => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={(self) => self.parent.setGeometry(self)}>\n          <catmullRomCurve3 args={[curve]} onUpdate={(self) => (self.parent.vertices = self.getPoints(500))} />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={ratio} />\n    </mesh>\n  )\n}\n\nfunction Scene() {\n  let group = useRef()\n  let theta = 0\n  // Hook into the render loop and rotate the scene a bit\n  useFrame(() => group.current.rotation.set(0, 5 * Math.sin(THREE.Math.degToRad((theta += 0.02))), 0))\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  )\n}\n\nfunction App() {\n  return (\n    <div class=\"main\">\n      <Canvas style={{ background: '#324444' }} camera={{ position: [0, 50, 10], fov: 75 }}>\n        <Scene />\n      </Canvas>\n      <a href=\"https://www.teatroautomovil.com/\" class=\"top-left\" children=\"TeatroAutomovil\" />\n      <a href=\"mailto:info@teatroautomovil.com\" class=\"bottom-right\" children=\"Escribenos\" />\n      <span class=\"header\">Taller Noel</span>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}